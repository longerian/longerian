// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.5.7 by WSRD Tencent.
// Generated from `/usr/local/resin_system.mqq.com/webapps/communication/taf/upload/kennyhong/scp.jce'
// **********************************************************************

package me.longerian.abc.hex;

public final class TransDataMessage extends com.qq.taf.jce.JceStruct implements java.lang.Cloneable
{
    public String className()
    {
        return "jce.TransDataMessage";
    }

    public String fullClassName()
    {
        return "com.tencent.wcs.jce.TransDataMessage";
    }

    public int nChannelId = 0;

    public String sSrcDeviceId = "";

    public String sDestDeviceId = "";

    public byte [] vecMessage = null;

    public int nMessageId = 0;

    public int nSequenceId = 0;

    public int eType = 0;

    public int nDataLen = 0;

    public int nIsCompress = 0;

    public int getNChannelId()
    {
        return nChannelId;
    }

    public void  setNChannelId(int nChannelId)
    {
        this.nChannelId = nChannelId;
    }

    public String getSSrcDeviceId()
    {
        return sSrcDeviceId;
    }

    public void  setSSrcDeviceId(String sSrcDeviceId)
    {
        this.sSrcDeviceId = sSrcDeviceId;
    }

    public String getSDestDeviceId()
    {
        return sDestDeviceId;
    }

    public void  setSDestDeviceId(String sDestDeviceId)
    {
        this.sDestDeviceId = sDestDeviceId;
    }

    public byte [] getVecMessage()
    {
        return vecMessage;
    }

    public void  setVecMessage(byte [] vecMessage)
    {
        this.vecMessage = vecMessage;
    }

    public int getNMessageId()
    {
        return nMessageId;
    }

    public void  setNMessageId(int nMessageId)
    {
        this.nMessageId = nMessageId;
    }

    public int getNSequenceId()
    {
        return nSequenceId;
    }

    public void  setNSequenceId(int nSequenceId)
    {
        this.nSequenceId = nSequenceId;
    }

    public int getEType()
    {
        return eType;
    }

    public void  setEType(int eType)
    {
        this.eType = eType;
    }

    public int getNDataLen()
    {
        return nDataLen;
    }

    public void  setNDataLen(int nDataLen)
    {
        this.nDataLen = nDataLen;
    }

    public int getNIsCompress()
    {
        return nIsCompress;
    }

    public void  setNIsCompress(int nIsCompress)
    {
        this.nIsCompress = nIsCompress;
    }

    public TransDataMessage()
    {
    }

    public TransDataMessage(int nChannelId, String sSrcDeviceId, String sDestDeviceId, byte [] vecMessage, int nMessageId, int nSequenceId, int eType, int nDataLen, int nIsCompress)
    {
        this.nChannelId = nChannelId;
        this.sSrcDeviceId = sSrcDeviceId;
        this.sDestDeviceId = sDestDeviceId;
        this.vecMessage = vecMessage;
        this.nMessageId = nMessageId;
        this.nSequenceId = nSequenceId;
        this.eType = eType;
        this.nDataLen = nDataLen;
        this.nIsCompress = nIsCompress;
    }

    public boolean equals(Object o)
    {
        if(o == null)
        {
            return false;
        }

        TransDataMessage t = (TransDataMessage) o;
        return (
            com.qq.taf.jce.JceUtil.equals(nChannelId, t.nChannelId) && 
            com.qq.taf.jce.JceUtil.equals(sSrcDeviceId, t.sSrcDeviceId) && 
            com.qq.taf.jce.JceUtil.equals(sDestDeviceId, t.sDestDeviceId) && 
            com.qq.taf.jce.JceUtil.equals(vecMessage, t.vecMessage) && 
            com.qq.taf.jce.JceUtil.equals(nMessageId, t.nMessageId) && 
            com.qq.taf.jce.JceUtil.equals(nSequenceId, t.nSequenceId) && 
            com.qq.taf.jce.JceUtil.equals(eType, t.eType) && 
            com.qq.taf.jce.JceUtil.equals(nDataLen, t.nDataLen) && 
            com.qq.taf.jce.JceUtil.equals(nIsCompress, t.nIsCompress) );
    }

    public int hashCode()
    {
        try
        {
            throw new Exception("Need define key first!");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        return 0;
    }
    public java.lang.Object clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void writeTo(com.qq.taf.jce.JceOutputStream _os)
    {
        _os.write(nChannelId, 0);
        _os.write(sSrcDeviceId, 1);
        _os.write(sDestDeviceId, 2);
        if (null != vecMessage)
        {
            _os.write(vecMessage, 3);
        }
        _os.write(nMessageId, 4);
        _os.write(nSequenceId, 5);
        _os.write(eType, 6);
        _os.write(nDataLen, 7);
        _os.write(nIsCompress, 8);
    }

    static byte [] cache_vecMessage;
    static int cache_eType;

    public void readFrom(com.qq.taf.jce.JceInputStream _is)
    {
        this.nChannelId = (int) _is.read(nChannelId, 0, true);
        this.sSrcDeviceId =  _is.readString(1, true);
        this.sDestDeviceId =  _is.readString(2, true);
        if(null == cache_vecMessage)
        {
            cache_vecMessage = (byte[]) new byte[1];
            byte __var_10 = 0;
            ((byte[])cache_vecMessage)[0] = __var_10;
        }
        this.vecMessage = (byte []) _is.read(cache_vecMessage, 3, false);
        this.nMessageId = (int) _is.read(nMessageId, 4, true);
        this.nSequenceId = (int) _is.read(nSequenceId, 5, true);
        this.eType = (int) _is.read(eType, 6, true);
        this.nDataLen = (int) _is.read(nDataLen, 7, true);
        this.nIsCompress = (int) _is.read(nIsCompress, 8, true);
    }

    public void display(java.lang.StringBuilder _os, int _level)
    {
        com.qq.taf.jce.JceDisplayer _ds = new com.qq.taf.jce.JceDisplayer(_os, _level);
        _ds.display(nChannelId, "nChannelId");
        _ds.display(sSrcDeviceId, "sSrcDeviceId");
        _ds.display(sDestDeviceId, "sDestDeviceId");
        _ds.display(vecMessage, "vecMessage");
        _ds.display(nMessageId, "nMessageId");
        _ds.display(nSequenceId, "nSequenceId");
        _ds.display(eType, "eType");
        _ds.display(nDataLen, "nDataLen");
        _ds.display(nIsCompress, "nIsCompress");
    }

    public void displaySimple(java.lang.StringBuilder _os, int _level)
    {
        com.qq.taf.jce.JceDisplayer _ds = new com.qq.taf.jce.JceDisplayer(_os, _level);
        _ds.displaySimple(nChannelId, true);
        _ds.displaySimple(sSrcDeviceId, true);
        _ds.displaySimple(sDestDeviceId, true);
        _ds.displaySimple(vecMessage, true);
        _ds.displaySimple(nMessageId, true);
        _ds.displaySimple(nSequenceId, true);
        _ds.displaySimple(eType, true);
        _ds.displaySimple(nDataLen, true);
        _ds.displaySimple(nIsCompress, false);
    }

}

